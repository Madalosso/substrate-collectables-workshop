diff --git a/src/impls.rs b/src/impls.rs
index b9b5548..d283fd6 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -3,11 +3,9 @@ use frame::prelude::*;
 
 impl<T: Config> Pallet<T> {
 	pub fn mint(owner: T::AccountId) -> DispatchResult {
-		/* ðŸš§ TODO ðŸš§: Remove the `unwrap_or` which is not needed when using `ValueQuery`. */
-		let current_count: u32 = CountForKitties::<T>::get().unwrap_or(0);
+		let current_count: u32 = CountForKitties::<T>::get();
 		let new_count = current_count.checked_add(1).ok_or(Error::<T>::TooManyKitties)?;
-		/* ðŸš§ TODO ðŸš§: Remove the `Option` wrapper when setting the `new_count`. */
-		CountForKitties::<T>::set(Some(new_count));
+		CountForKitties::<T>::set(new_count);
 		Self::deposit_event(Event::<T>::Created { owner });
 		Ok(())
 	}
diff --git a/src/lib.rs b/src/lib.rs
index 322eeee..52b2dba 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -18,8 +18,7 @@ pub mod pallet {
 	}
 
 	#[pallet::storage]
-	/* ðŸš§ TODO ðŸš§: Update this storage to use a `QueryKind` of `ValueQuery`. */
-	pub(super) type CountForKitties<T: Config> = StorageValue<Value = u32>;
+	pub(super) type CountForKitties<T: Config> = StorageValue<Value = u32, QueryKind = ValueQuery>;
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
