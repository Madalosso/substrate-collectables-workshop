diff --git a/src/impls.rs b/src/impls.rs
index f018a29..be5ceb0 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -26,6 +26,9 @@ impl<T: Config> Pallet<T> {
 		let current_count: u64 = CountForKitties::<T>::get();
 		let new_count = current_count.checked_add(1).ok_or(Error::<T>::TooManyKitties)?;
 
+		/* ðŸš§ TODO ðŸš§:
+			- Update `append` to `try_append` and `map_err` to `Error::<T>::TooManyOwned`.
+		*/
 		KittiesOwned::<T>::append(&owner, dna);
 		Kitties::<T>::insert(dna, kitty);
 		CountForKitties::<T>::set(new_count);
diff --git a/src/lib.rs b/src/lib.rs
index 2c81d9a..6a24715 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -33,8 +33,12 @@ pub mod pallet {
 
 	/// Track the kitties owned by each account.
 	#[pallet::storage]
-	pub(super) type KittiesOwned<T: Config> =
-		StorageMap<Key = T::AccountId, Value = Vec<[u8; 32]>, QueryKind = ValueQuery>;
+	pub(super) type KittiesOwned<T: Config> = StorageMap<
+		Key = T::AccountId,
+		/* ðŸš§ TODO ðŸš§: Turn this into a `BoundedVec` with a limit of `ConstU32<100>`. */
+		Value = Vec<[u8; 32]>,
+		QueryKind = ValueQuery,
+	>;
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
@@ -46,6 +50,7 @@ pub mod pallet {
 	pub enum Error<T> {
 		TooManyKitties,
 		DuplicateKitty,
+		/* ðŸš§ TODO ðŸš§: Add a new `Error` named `TooManyOwned` */
 	}
 
 	#[pallet::call]
