diff --git a/src/impls.rs b/src/impls.rs
index bf9d3b7..a616253 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -1,6 +1,7 @@
 use super::*;
 use frame_support::pallet_prelude::*;
 
+// Learn about internal functions.
 impl<T: Config> Pallet<T> {
 	// Generates and returns DNA and Sex
 	pub fn gen_dna() -> [u8; 16] {
@@ -25,10 +26,7 @@ impl<T: Config> Pallet<T> {
 		let current_count: u64 = CountForKitties::<T>::get();
 		let new_count = current_count.checked_add(1).ok_or(Error::<T>::TooManyKitties)?;
 
-		/* ðŸš§ TODO ðŸš§:
-			- Update `append` to `try_append` and `map_err` to `Error::<T>::TooManyOwned`.
-		*/
-		KittiesOwned::<T>::append(&owner, dna);
+		KittiesOwned::<T>::try_append(&owner, dna).map_err(|_| Error::<T>::TooManyOwned)?;
 		Kitties::<T>::insert(dna, kitty);
 		CountForKitties::<T>::set(new_count);
 
diff --git a/src/lib.rs b/src/lib.rs
index bf5d3e8..03778ba 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -36,8 +36,7 @@ pub mod pallet {
 	#[pallet::storage]
 	pub(super) type KittiesOwned<T: Config> = StorageMap<
 		Key = T::AccountId,
-		/* ðŸš§ TODO ðŸš§: Turn this into a `BoundedVec` with a limit of `ConstU32<100>`. */
-		Value = Vec<[u8; 16]>,
+		Value = BoundedVec<[u8; 16], ConstU32<100>>,
 		QueryKind = ValueQuery,
 	>;
 
@@ -51,7 +50,7 @@ pub mod pallet {
 	pub enum Error<T> {
 		TooManyKitties,
 		DuplicateKitty,
-		/* ðŸš§ TODO ðŸš§: Add a new `Error` named `TooManyOwned` */
+		TooManyOwned,
 	}
 
 	#[pallet::call]
