diff --git a/src/lib.rs b/src/lib.rs
index c8ef256..cbfa8b5 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -55,8 +55,7 @@ pub mod pallet {
 		pub fn create_kitty(origin: OriginFor<T>) -> DispatchResult {
 			// Learn about `origin`.
 			let who = ensure_signed(origin)?;
-			/* TODO: Use the `Self::gen_dna()` function to generate a unique Kitty. */
-			let dna = [0u8; 16];
+			let dna = Self::gen_dna();
 			Self::mint(who, dna)?;
 			Ok(())
 		}
@@ -64,16 +63,20 @@ pub mod pallet {
 
 	// Learn about internal functions.
 	impl<T: Config> Pallet<T> {
-		/* TODO: Create a function `gen_dna` which returns a `[u8; 16]`.
-			- Create a `unique_payload` which contains data from `frame_system::Pallet::<T>`:
-				- `parent_hash`
-				- `block_number`
-				- `extrinsic_index`
-				- `CountForKitties::<T>::get()`
-			- `encode()` that payload to a byte array named `encoded_payload`.
-			- Use `frame_support::Hashable` to perform a `blake2_128` hash on the encoded payload.
-			- Return the 16 byte hash.
-		*/
+		// Generates and returns DNA and Sex
+		fn gen_dna() -> [u8; 16] {
+			// Create randomness payload. Multiple kitties can be generated in the same block,
+			// retaining uniqueness.
+			let unique_payload = (
+				frame_system::Pallet::<T>::parent_hash(),
+				frame_system::Pallet::<T>::block_number(),
+				frame_system::Pallet::<T>::extrinsic_index(),
+				CountForKitties::<T>::get(),
+			);
+
+			let encoded_payload: Vec<u8> = unique_payload.encode();
+			frame_support::Hashable::blake2_128(&encoded_payload)
+		}
 
 		// Learn about `AccountId`.
 		fn mint(owner: T::AccountId, dna: [u8; 16]) -> DispatchResult {
