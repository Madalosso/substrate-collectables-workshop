diff --git a/src/lib.rs b/src/lib.rs
index c8ea870..30d12b4 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -18,13 +18,11 @@ pub mod pallet {
 		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
 	}
 
-	/* ðŸš§ TODO ðŸš§:
-		- Create a new `struct` called `Kitty`.
-		- Make `Kitty` generic over `T` where `T: Config`.
-		- Add two fields to `Kitty`:
-			- `dna` which is type `[u8; 32]`.
-			- `owner` which is type `T::AccountId`.
-	*/
+	pub struct Kitty<T: Config> {
+		// Using 32 bytes to represent a kitty DNA
+		pub dna: [u8; 32],
+		pub owner: T::AccountId,
+	}
 
 	#[pallet::storage]
 	pub(super) type CountForKitties<T: Config> = StorageValue<Value = u32, QueryKind = ValueQuery>;
diff --git a/src/tests.rs b/src/tests.rs
index 5d5027c..823403e 100644
--- a/src/tests.rs
+++ b/src/tests.rs
@@ -162,3 +162,8 @@ fn cannot_mint_duplicate_kitty() {
 		assert_noop!(PalletKitties::mint(2, [0u8; 32]), Error::<TestRuntime>::DuplicateKitty);
 	})
 }
+
+#[test]
+fn kitty_struct_created_correctly() {
+	let _kitty = Kitty::<TestRuntime> { dna: [0u8; 32], owner: 1 };
+}
