diff --git a/src/impls.rs b/src/impls.rs
index 0823a7f..62160cc 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -2,16 +2,20 @@ use super::*;
 use frame_support::pallet_prelude::*;
 
 impl<T: Config> Pallet<T> {
-	/* ðŸš§ TODO ðŸš§: Create a function `gen_dna` which returns a `[u8; 32]`.
-		- Create a `unique_payload` which contains data from `frame_system::Pallet::<T>`:
-			- `parent_hash`
-			- `block_number`
-			- `extrinsic_index`
-			- `CountForKitties::<T>::get()`
-		- `encode()` that payload to a byte array named `encoded_payload`.
-		- Use `frame_support::Hashable` to perform a `blake2_256` hash on the encoded payload.
-		- Return the 32 byte hash.
-	*/
+	// Generates and returns DNA and Sex
+	pub fn gen_dna() -> [u8; 32] {
+		// Create randomness payload. Multiple kitties can be generated in the same block,
+		// retaining uniqueness.
+		let unique_payload = (
+			frame_system::Pallet::<T>::parent_hash(),
+			frame_system::Pallet::<T>::block_number(),
+			frame_system::Pallet::<T>::extrinsic_index(),
+			CountForKitties::<T>::get(),
+		);
+
+		let encoded_payload: Vec<u8> = unique_payload.encode();
+		frame_support::Hashable::blake2_256(&encoded_payload)
+	}
 
 	pub fn mint(owner: T::AccountId, dna: [u8; 32]) -> DispatchResult {
 		let kitty = Kitty { dna, owner: owner.clone() };
diff --git a/src/lib.rs b/src/lib.rs
index 14bfe5e..0a04ad8 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -48,8 +48,7 @@ pub mod pallet {
 	impl<T: Config> Pallet<T> {
 		pub fn create_kitty(origin: OriginFor<T>) -> DispatchResult {
 			let who = ensure_signed(origin)?;
-			/* ðŸš§ TODO ðŸš§: Use the `Self::gen_dna()` function to generate a unique Kitty. */
-			let dna = [0u8; 32];
+			let dna = Self::gen_dna();
 			Self::mint(who, dna)?;
 			Ok(())
 		}
