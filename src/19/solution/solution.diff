diff --git a/src/impls.rs b/src/impls.rs
index 0913dbd..3505961 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -1,18 +1,22 @@
 use super::*;
 use frame::prelude::*;
-/* ðŸš§ TODO ðŸš§: Import `frame::primtives::BlakeTwo256`. */
-/* ðŸš§ TODO ðŸš§: Import `frame::traits::Hash`. */
+use frame::primitives::BlakeTwo256;
+use frame::traits::Hash;
 
 impl<T: Config> Pallet<T> {
-	/* ðŸš§ TODO ðŸš§: Create a function `gen_dna` which returns a `[u8; 32]`.
-		- Create a `unique_payload` which contains data from `frame_system::Pallet::<T>`:
-			- `parent_hash`
-			- `block_number`
-			- `extrinsic_index`
-			- `CountForKitties::<T>::get()`
-		- Use `BlakeTwo256` to calculate the `hash_of` the unique payload.
-		- Return the hash as a `[u8; 32]`.
-	*/
+	// Generates and returns DNA and Sex
+	pub fn gen_dna() -> [u8; 32] {
+		// Create randomness payload. Multiple kitties can be generated in the same block,
+		// retaining uniqueness.
+		let unique_payload = (
+			frame_system::Pallet::<T>::parent_hash(),
+			frame_system::Pallet::<T>::block_number(),
+			frame_system::Pallet::<T>::extrinsic_index(),
+			CountForKitties::<T>::get(),
+		);
+
+		BlakeTwo256::hash_of(&unique_payload).into()
+	}
 
 	pub fn mint(owner: T::AccountId, dna: [u8; 32]) -> DispatchResult {
 		let kitty = Kitty { dna, owner: owner.clone() };
diff --git a/src/lib.rs b/src/lib.rs
index 0166c2d..0859d19 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -47,8 +47,7 @@ pub mod pallet {
 	impl<T: Config> Pallet<T> {
 		pub fn create_kitty(origin: OriginFor<T>) -> DispatchResult {
 			let who = ensure_signed(origin)?;
-			/* ðŸš§ TODO ðŸš§: Use the `Self::gen_dna()` function to generate a unique Kitty. */
-			let dna = [0u8; 32];
+			let dna = Self::gen_dna();
 			Self::mint(who, dna)?;
 			Ok(())
 		}
