diff --git a/src/impls.rs b/src/impls.rs
index 46d0290..b8bdd01 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -2,6 +2,17 @@ use super::*;
 use frame_support::pallet_prelude::*;
 
 impl<T: Config> Pallet<T> {
+	/* ðŸš§ TODO ðŸš§: Create a function `gen_dna` which returns a `[u8; 16]`.
+		- Create a `unique_payload` which contains data from `frame_system::Pallet::<T>`:
+			- `parent_hash`
+			- `block_number`
+			- `extrinsic_index`
+			- `CountForKitties::<T>::get()`
+		- `encode()` that payload to a byte array named `encoded_payload`.
+		- Use `frame_support::Hashable` to perform a `blake2_128` hash on the encoded payload.
+		- Return the 16 byte hash.
+	*/
+
 	pub fn mint(owner: T::AccountId, dna: [u8; 16]) -> DispatchResult {
 		let kitty = Kitty { dna, owner: owner.clone() };
 		// Check if the kitty does not already exist in our storage map
diff --git a/src/lib.rs b/src/lib.rs
index 43a3d23..88924bf 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -48,6 +48,7 @@ pub mod pallet {
 	impl<T: Config> Pallet<T> {
 		pub fn create_kitty(origin: OriginFor<T>) -> DispatchResult {
 			let who = ensure_signed(origin)?;
+			/* ðŸš§ TODO ðŸš§: Use the `Self::gen_dna()` function to generate a unique Kitty. */
 			let dna = [0u8; 16];
 			Self::mint(who, dna)?;
 			Ok(())
