diff --git a/src/impls.rs b/src/impls.rs
index 741a6ff..5d3c104 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -3,17 +3,13 @@ use frame::prelude::*;
 
 impl<T: Config> Pallet<T> {
 	pub fn mint(owner: T::AccountId, dna: [u8; 32]) -> DispatchResult {
-		/* ðŸš§ TODO ðŸš§:
-			- Create a new variable `kitty` which is a `Kitty` struct with `dna` and `owner`.
-		*/
-
+		let kitty = Kitty { dna, owner: owner.clone() };
 		// Check if the kitty does not already exist in our storage map
 		ensure!(!Kitties::<T>::contains_key(dna), Error::<T>::DuplicateKitty);
 
 		let current_count: u32 = CountForKitties::<T>::get();
 		let new_count = current_count.checked_add(1).ok_or(Error::<T>::TooManyKitties)?;
-		/* ðŸš§ TODO ðŸš§: Insert `kitty`into the map instead of `()`. */
-		Kitties::<T>::insert(dna, ());
+		Kitties::<T>::insert(dna, kitty);
 		CountForKitties::<T>::set(new_count);
 		Self::deposit_event(Event::<T>::Created { owner });
 		Ok(())
diff --git a/src/lib.rs b/src/lib.rs
index 68f57e1..aa6ca3b 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -18,10 +18,8 @@ pub mod pallet {
 		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
 	}
 
-	/* ðŸš§ TODO ðŸš§:
-		- Add the derive macros needed for putting a struct in storage.
-		- Add `#[scale_info(skip_type_params(T))]` to ignore the generic `T`.
-	*/
+	#[derive(Encode, Decode, TypeInfo, MaxEncodedLen)]
+	#[scale_info(skip_type_params(T))]
 	pub struct Kitty<T: Config> {
 		// Using 32 bytes to represent a kitty DNA
 		pub dna: [u8; 32],
@@ -32,8 +30,7 @@ pub mod pallet {
 	pub(super) type CountForKitties<T: Config> = StorageValue<Value = u32, QueryKind = ValueQuery>;
 
 	#[pallet::storage]
-	/* ðŸš§ TODO ðŸš§: Update the `Value` to be type `Kitty<T>` instead of (). */
-	pub(super) type Kitties<T: Config> = StorageMap<Key = [u8; 32], Value = ()>;
+	pub(super) type Kitties<T: Config> = StorageMap<Key = [u8; 32], Value = Kitty<T>>;
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
