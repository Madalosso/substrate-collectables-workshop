diff --git a/src/impls.rs b/src/impls.rs
index 1af97cb..e4449c9 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -3,9 +3,11 @@ use frame_support::pallet_prelude::*;
 
 impl<T: Config> Pallet<T> {
 	// Learn about `AccountId`.
+	/* TODO: Update this function signature to include `id` which is type `[u8; 16]`. */
 	pub fn mint(owner: T::AccountId) -> DispatchResult {
 		let current_count: u64 = CountForKitties::<T>::get();
 		let new_count = current_count.checked_add(1).ok_or(Error::<T>::TooManyKitties)?;
+		/* TODO: In the `Kitties` map, under the key `id`, insert `()`. */
 		CountForKitties::<T>::set(new_count);
 		Self::deposit_event(Event::<T>::Created { owner });
 		Ok(())
diff --git a/src/lib.rs b/src/lib.rs
index 38fafb0..978c774 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -48,6 +48,8 @@ pub mod pallet {
 		pub fn create_kitty(origin: OriginFor<T>) -> DispatchResult {
 			// Learn about `origin`.
 			let who = ensure_signed(origin)?;
+			/* TODO: Create `const default_id`, which type `[u8; 16]` and has value `[0u8; 16]`. */
+			/* TODO: Pass `default_id` to the `mint` function as a second parameter. */
 			Self::mint(who)?;
 			Ok(())
 		}
