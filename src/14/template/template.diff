diff --git a/src/impls.rs b/src/impls.rs
index 8b6d7fe..f6cd166 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -2,9 +2,11 @@ use super::*;
 use frame::prelude::*;
 
 impl<T: Config> Pallet<T> {
+	/* ðŸš§ TODO ðŸš§: Update this function signature to include `id` which is type `[u8; 32]`. */
 	pub fn mint(owner: T::AccountId) -> DispatchResult {
 		let current_count: u64 = CountForKitties::<T>::get();
 		let new_count = current_count.checked_add(1).ok_or(Error::<T>::TooManyKitties)?;
+		/* ðŸš§ TODO ðŸš§: In the `Kitties` map, under the key `id`, insert `()`. */
 		CountForKitties::<T>::set(new_count);
 		Self::deposit_event(Event::<T>::Created { owner });
 		Ok(())
diff --git a/src/lib.rs b/src/lib.rs
index 93866df..122c863 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -20,7 +20,6 @@ pub mod pallet {
 	#[pallet::storage]
 	pub(super) type CountForKitties<T: Config> = StorageValue<Value = u64, QueryKind = ValueQuery>;
 
-	/* ðŸš§ TODO ðŸš§: Learn about storage maps. */
 	#[pallet::storage]
 	pub(super) type Kitties<T: Config> = StorageMap<Key = [u8; 32], Value = ()>;
 
@@ -39,6 +38,10 @@ pub mod pallet {
 	impl<T: Config> Pallet<T> {
 		pub fn create_kitty(origin: OriginFor<T>) -> DispatchResult {
 			let who = ensure_signed(origin)?;
+			/* ðŸš§ TODO ðŸš§:
+				- Create `const default_id`, which type `[u8; 32]` and has value `[0u8; 32]`.
+				- Pass `default_id` to the `mint` function as a second parameter.
+			*/
 			Self::mint(who)?;
 			Ok(())
 		}
