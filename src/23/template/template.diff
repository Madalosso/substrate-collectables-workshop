diff --git a/src/lib.rs b/src/lib.rs
index 2a0eada..e98469d 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -57,6 +57,11 @@ pub mod pallet {
 		TooManyKitties,
 		DuplicateKitty,
 		TooManyOwned,
+		/* Add new `Error` variants needed for `do_transfer`:
+			- `TransferToSelf`: for when the `from` and `to` of the transfer is the same.
+			- `NoKitty`: for when a transfer involves a kitty that does not exist.
+			- `NotOwner`: for when a transfer is initiated by someone who is not the current owner.
+		*/
 	}
 
 	// Learn about callable functions and dispatch.
@@ -122,6 +127,28 @@ pub mod pallet {
 			to: T::AccountId,
 			kitty_id: [u8; 16],
 		) -> DispatchResult {
+			/* TODO: Sanity check the transfer is allowed:
+				- First `ensure!` that `from` and `to` are not equal, else return `Error::<T>::TransferToSelf`.
+				- Get the `kitty` from `Kitties` using `kitty_id`, else return `Error::<T>::NoKitty`.
+				- Check the `kitty.owner` is equal to `from`, else return `NotOwner`.
+				- Update `kitty.owner` to `to`.
+			*/
+
+			/* TODO: Update the `KittiesOwned` of `from` and `to:
+				- Create a mutable `from_owned` by querying `KittiesOwned` for `from`.
+				- Write logic to `swap_remove` the item from the `from_owned` vector.
+					- If you cannot find the kitty in the vector, return `Error::<T>::NoKitty`.
+				- Create a mutable `to_owned` by querying `KittiesOwned` for `to`.
+				- `try_push` the `kitty_id` to the `to_owned` vector.
+					- If the vector is full, `map_err` and return `Error::<T>::TooManyOwned`.
+			*/
+
+			/* TODO: Update the final storage.
+				- Insert into `Kitties` under `kitty_id` the modified `kitty` struct.
+				- Insert into `KittiesOwned` under `to` the modified `to_owned` vector.
+				- Insert into `KittiesOwned` under `from` the modified `from_owned` vector.
+			*/
+
 			Self::deposit_event(Event::<T>::Transferred { from, to, kitty_id });
 			Ok(())
 		}
