diff --git a/src/lib.rs b/src/lib.rs
index 6730289..bfddc9e 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -49,6 +49,12 @@ pub mod pallet {
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
 	pub enum Event<T: Config> {
 		Created { owner: T::AccountId },
+		/* TODO: Create a new event called `Transferred`:
+			- Parameters are:
+				- `from` which is `T::AccountId`.
+				- `to` which is `T::AccountId`.
+				- `kitty_id` which is `[u8; 16]`.
+		*/
 	}
 
 	#[pallet::error]
@@ -68,6 +74,18 @@ pub mod pallet {
 			Self::mint(who, dna)?;
 			Ok(())
 		}
+
+		/* TODO: Make a new extrinsic called `transfer`.
+			- Input parameters are:
+				- `origin` which is `OriginFor<T>`.
+				- `to` which is `T::AccountId`.
+				- `kitty_id` which is `[u8; 16]`.
+			- Returns a `DispatchResult`.
+			- The inner logic should be:
+				- Get the caller `who` from `ensure_signed`.
+				- Call `Self::do_transfer`, and propagate the result.
+				- End with Ok(()).
+		*/
 	}
 
 	// Learn about internal functions.
@@ -103,5 +121,16 @@ pub mod pallet {
 			Self::deposit_event(Event::<T>::Created { owner });
 			Ok(())
 		}
+
+		/* TODO: Create an internal function called `do_transfer`:
+			- It has inputs:
+				- `from` which is `T::AccountId`.
+				- `to` which is `T::AccountId`.
+				- `kitty_id` which is `[u8; 16]`.
+			- It returns a `DispatchResult`
+			- The inner logic for now is:
+				- Call `Self::dispatch_event` on and emit `Event::<T>:Transferred` with params.
+				- Return `Ok(())`.
+		*/
 	}
 }
