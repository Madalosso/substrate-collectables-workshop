diff --git a/src/impls.rs b/src/impls.rs
index 6d1ad0e..036a441 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -76,6 +76,22 @@ impl<T: Config> Pallet<T> {
 		kitty_id: [u8; 32],
 		price: BalanceOf<T>,
 	) -> DispatchResult {
+		/* ðŸš§ TODO ðŸš§: Sanity check that the purchase is allowed:
+			- Get `kitty` from `Kitties` using `kitty_id`, `ok_or` return `Error::<T>::NoKitty`.
+			- Get the `real_price` from `kitty.price`, `ok_or` return `Error::<T>::NotForSale`.
+			- `ensure!` that `price` is greater or equal to `real_price`, else `Error::<T>::MaxPriceTooLow`.
+		*/
+
+		/* ðŸš§ TODO ðŸš§: Execute the transfers:
+			- Import `use frame_support::traits::tokens::Preservation;`, which is used for balance transfer.
+			- Use `T::NativeBalance` to `transfer` from the `buyer` to the `kitty.owner`.
+				- The amount transferred should be the `real_price`.
+				- Use `Preservation::Preserve` to ensure the buyer account stays alive.
+			- Use `Self::do_transfer` to transfer from the `kitty.owner` to the `buyer` with `kitty_id`.
+			- Remember to propagate up all results from these functions with `?`.
+		*/
+
+		/* ðŸš§ TODO ðŸš§: Update the event to use the `real_price` in the `Event`. */
 		Self::deposit_event(Event::<T>::Sold { buyer, kitty_id, price });
 		Ok(())
 	}
diff --git a/src/lib.rs b/src/lib.rs
index df2ccc1..da5e656 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -68,6 +68,10 @@ pub mod pallet {
 		TransferToSelf,
 		NoKitty,
 		NotOwner,
+		/* ðŸš§ TODO ðŸš§: Add `Errors` needed for `do_buy_kitty`:
+			- `NotForSale`: for when the Kitty has a price set to `None`.
+			- `MaxPriceTooLow`: for when the price offered by the buyer is too low.
+		*/
 	}
 
 	#[pallet::call]
