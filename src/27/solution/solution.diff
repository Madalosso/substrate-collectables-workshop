diff --git a/src/impls.rs b/src/impls.rs
index dcfc6f3..0829bd4 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -57,14 +57,12 @@ impl<T: Config> Pallet<T> {
 		Ok(())
 	}
 
-	/* ðŸš§ TODO ðŸš§: Make an internal function called `do_set_price`:
-		- Inputs to the function are:
-			- `caller` which is `T::AccountId`.
-			- `kitty_id` which is `[u8; 32]`.
-			- `new_price` which is `Option<BalanceOf<T>`.
-		- Returns a `DispatchResult`.
-		- The internal logic, for now, should be:
-			- `Self::deposit_event` for `Event::<T>::PriceSet` with the appropriate params.
-			- Return `Ok(())`.
-	*/
+	pub fn do_set_price(
+		caller: T::AccountId,
+		kitty_id: [u8; 32],
+		new_price: Option<BalanceOf<T>>,
+	) -> DispatchResult {
+		Self::deposit_event(Event::<T>::PriceSet { owner: caller, kitty_id, new_price });
+		Ok(())
+	}
 }
diff --git a/src/lib.rs b/src/lib.rs
index d07533c..003605d 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -56,11 +56,7 @@ pub mod pallet {
 	pub enum Event<T: Config> {
 		Created { owner: T::AccountId },
 		Transferred { from: T::AccountId, to: T::AccountId, kitty_id: [u8; 32] },
-		/* ðŸš§ TODO ðŸš§: Create a new `Event` called `PriceSet` with fields:
-			- `owner` which is `T::AccountId`.
-			- `kitty_id` which is `[u8; 32]`.
-			- `new_price` which is `Option<BalanceOf<T>>`.
-		*/
+		PriceSet { owner: T::AccountId, kitty_id: [u8; 32], new_price: Option<BalanceOf<T>> },
 	}
 
 	#[pallet::error]
@@ -92,16 +88,14 @@ pub mod pallet {
 			Ok(())
 		}
 
-		/* ðŸš§ TODO ðŸš§: Make an callable function called `set_price`:
-			- Inputs to the function are:
-				- `origin` which is `OriginFor<T>`.
-				- `kitty_id` which is `[u8; 32]`.
-				- `new_price` which is `Option<BalanceOf<T>`.
-			- Returns a `DispatchResult`
-			- The internal logic, for now, should be:
-				- Extract the caller `who` with `ensure_signed`.
-				- Call `Self::do_set_price` with the appropriate parameters, propagating the result.
-				- Return `Ok(())`.
-		*/
+		pub fn set_price(
+			origin: OriginFor<T>,
+			kitty_id: [u8; 32],
+			new_price: Option<BalanceOf<T>>,
+		) -> DispatchResult {
+			let who = ensure_signed(origin)?;
+			Self::do_set_price(who, kitty_id, new_price)?;
+			Ok(())
+		}
 	}
 }
